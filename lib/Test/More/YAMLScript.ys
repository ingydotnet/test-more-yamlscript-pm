# ns Test::More::YAMLScript:
#   use:
#   - Lingy::Util
#   import:
#   - Test::Builder

# ns: Test::More::YAMLScript
ns: Test.More.YAMLScript

# use: Lingy::Util
use: \'lingy.Util

# import: Test::Builder
import: Test.Builder

# t =: new(Test::Builder)
# t .: new(Test::Builder)
# t =: Test::Builder->new
t =: .new(Test.Builder)

# t .: level(2)
do: .level(t 2)

plan(count):
  .plan(t "tests" count)

do:

# pass(+):
#   ():
#     .ok(t true)
#   (label):
#     .ok(t true)
- (defn pass
    ([]
      .ok(t true))
    ([label]
      .ok(t true label)))

# fail(label=nil):
#   (t).ok(false, label)
- (defn fail
    ([]
      .ok(t false))
    ([label]
      .ok(t false label)))

# note(msg): t->note(msg)
note(msg): .note(t msg)

diag(msg): .diag(t msg)

do:
- (defn ok
    ([cond]
      .ok(t cond))
    ([cond label]
      .ok(t cond label)))

- (defn is
    ([got want]
      .is_eq(t got want))
    ([got want label]
      .is_eq(t got want label)))

- (defn isnt
    ([got want]
      .isnt_eq(t got want))
    ([got want label]
      .isnt_eq(t got want label)))

- (defn like
    ([str rgx]
      .like(t str rgx))
    ([str rgx label]
      .like(t str rgx label)))

- (defn unlike
    ([str rgx]
      .unlike(t str rgx))
    ([str rgx label]
      .unlike(t str rgx label)))

- (defmacro todo [label & tests]
    `(.todo_skip t ~label))

- (defmacro skip [label & tests]
    `(.todo_skip t ~label))

skip-all(label): .skip_all(t label)

do:
- (defmacro subtest [label & tests]
    `(.subtest Test.More.YAMLScript t ~label '~tests))

- (defn done-testing
    ([]
      .done_testing(t))
    ([num]
      .done_testing(t num)))
