#------------------------------------------------------------------------------
# This is the complete implementation of the CPAN module
# Test::More::YAMLScript, written entirely in YAMLScript.
#------------------------------------------------------------------------------

use: lingy.devel            # For debugging

ns: Test::More::YAMLScript  # Define the module namespace

import: Test::Builder       # Use Perl's Test::Builder module

tb =: Test::Builder->new()  # Create a singleton Test::Builder object

defn call-tb(m, *args):
  (. lingy.lang.RT applyTo tb m args)

#------------------------------------------------------------------------------
# All the following functions proxy to Test::Builder methods:
#------------------------------------------------------------------------------

defn plan(count):
  tb->plan("tests", count)

defn pass(*args):
  apply(call-tb, 'ok, cons(true, args))

defn fail(*args):
  apply(call-tb, 'ok, cons(false, args))

defn note(msg):
  tb->note(msg)

defn diag(msg):
  tb->diag(msg)

defn ok(*args):
  apply(call-tb, 'ok, args)

defn is(*args):
  apply(call-tb, 'is_eq args)

defn isnt(*args):
  apply(call-tb, 'isnt_eq, args)

defn like(*args):
  apply(call-tb, 'like, args)

defn unlike(*args):
  apply(call-tb, 'unlike, args)

defn done-testing(*args):
  apply(call-tb, 'done_testing, args)

defn skip-all(label):
  tb->skip_all(label)

# Macros:
defmacro todo(label, *tests):
  .`tb->todo_skip(~label)

defmacro skip(label, *tests):
  .`tb->todo_skip(~label)

defmacro subtest(label *tests):
  .`Dummy::Module->subtest(tb, ~label, '~tests)

# XXX - Eval this Perl code until we can figure out a better Perl iterop
# strategy for callbacks.

perl: ! |
  $INC{'Dummy/Module.pm'} //= 1;
  sub Dummy::Module::subtest {
      my ($self, $tb, $label, $exprs) = @_;
      $tb->subtest(
          $label,
          sub { Lingy::Evaluator::evaluate($_, $Lingy::Evaluator::ENV) for @_ },
          @$exprs,
      );
  }

# vim: set ft=yaml:
